# -*- coding: utf-8 -*-
"""Ensemble.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q2bs11ydJjmyOyHw0H9bTz0LdcXdVZ7X
"""

import pandas as pd
from xgboost.sklearn import XGBClassifier
import lightgbm 
from sklearn.ensemble import GradientBoostingClassifier,VotingClassifier,StackingClassifier
from Classification import Classification

class Ensemble(Classification):
    
    def __init__(self, ensemble_method,X_train, y_train, X_val, y_val,hyper_tuning_method = "grid"):
        
        self.ensemble_method = ensemble_method
        self.x_train = X_train
        self.y_train = y_train
        self.x_val = X_val
        self.y_val = y_val
        self.model_type = ensemble_method
        self.hyper_tuning_method = hyper_tuning_method
        self.scores_table = pd.DataFrame()
        self.estimators = None
        if self.ensemble_method == "XGBoost":
            self.model = XGBClassifier(n_jobs=-1)
        elif self.ensemble_method == "LightGbm":
            self.model = lightgbm.LGBMClassifier()

        elif self.ensemble_method == "Gradient_Boosting":
            self.model = GradientBoostingClassifier()
        elif self.ensemble_method == "Voting":
            self.model = VotingClassifier(estimators=self.estimators, voting='soft', n_jobs=-1)
        elif self.ensemble_method == "Stacking":
            self.model = StackingClassifier(self.estimators)  
    
    def methods(self,methods):
        self.estimators = methods
    

